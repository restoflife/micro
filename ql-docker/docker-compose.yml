version: '3'
#docker stop $(docker ps -q) & docker rm $(docker ps -aq)
services:
  golang:
    build:
      context: ./golang
      dockerfile: Dockerfile
    container_name: golang
    hostname: golang
    restart: always
    networks:
      webserver:
        ipv4_address: 172.18.238.2
    ports:
      - "1800:1800"
      - "8020:3300"
    links:
      - redis
      - mysql
#      - mongodb
    volumes:
      - "../ql-gateway:/www/ql-gateway"
      - "../ql-protos:/www/ql-protos"
      - "../ql-mp:/www/ql-mp"
      - "../ql-order:/www/ql-order"
    tty: true
  redis:
    image: redis:6.0.6-alpine
    container_name: redis
    hostname: redis
    restart: always
    networks:
      webserver:
        ipv4_address: 172.18.238.4
    ports:
      - "6379:6379"
  mongodb:
    build:
      context: ./mongo
      dockerfile: Dockerfile
    container_name: mongodb
    hostname: mongodb
    restart: always
    logging:
      driver: none
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongodb
    ports:
      - "27017:27017"
    networks:
      webserver:
        ipv4_address: 172.18.238.5
  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    container_name: mysql
    hostname: mysql
    restart: always
    networks:
      webserver:
        ipv4_address: 172.18.238.6
    ports:
      - "33066:3306"
    command: --default-authentication-plugin=mysql_native_password
    #restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - "./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf"  #如若需要容器加载并使用该配置,宿主机文件权限必须为只读,否则挂载到容器内权限为777会导致MYSQL服务自动忽略该配置文件
      - "./mysql/data/:/var/lib/mysql/"
      - "./mysql/mysql-files/:/var/lib/mysql-files/"
#  etcd:
#    hostname: etcd
#    image: bitnami/etcd:latest
#    container_name: etcd
#    privileged: true
#    volumes:
#      - "./etcd/data:/etc/etcd/data"
#    environment:
#      - "ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379"
#      - "ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
#      - "ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2378"
#      - "ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2378"
#      - "ALLOW_NONE_AUTHENTICATION=yes"
#      - "ETCD_INITIAL_CLUSTER=node1=http://0.0.0.0:2378"
#      - "ETCD_NAME=node1"
#      - "ETCD_DATA_DIR=/opt/bitnami/etcd/data"
#    ports:
#      - "2377:2379"
#      - "2378:2378"
##    restart: always
#    networks:
#      webserver:
#        ipv4_address: 172.18.238.8
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    hostname: zipkin
#    ports:
#      - "9411:9411"
#  elasticsearch:
#    build:
#      context: ./elasticsearch
#      dockerfile: Dockerfile
#    container_name: elasticsearch
#    networks:
#      webserver:
#        ipv4_address: 172.18.238.9
#    ports:
#      - "9200:9200"
#    environment:
#      - node.name=node-1
#      - cluster.name=es_cluster
#      - cluster.initial_master_nodes=node-1
#      - bootstrap.memory_lock=true
##      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
##    restart: always
#    volumes:
#      - "./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
#      - "./elasticsearch/data:/usr/share/elasticsearch/data"
#      - "./elasticsearch/plugins:/usr/share/elasticsearch/plugins"
#      - "./elasticsearch/logs:/usr/share/elasticsearch/logs"
#  kibana:
#    build:
#      context: ./kibana
#      dockerfile: Dockerfile
#    container_name: kibana
#    ports:
#      - "5601:5601"
#    volumes:
#      - "./kibana/config:/usr/share/kibana/config"
#    environment:
#      ELASTICSEARCH_URL: http://172.18.238.9:9200
#      ELASTICSEARCH_HOSTS: '["http://172.18.238.9:9200"]'
#      LOGGING_VERBOSE: "true"
##    restart: always
#    networks:
#      webserver:
#        ipv4_address: 172.18.238.10
#    depends_on:
#      - elasticsearch
#  logstash:
#    build:
#      context: ./logstash
#      dockerfile: Dockerfile
#    container_name: logstash
#    environment:
#      - TZ=Asia/Shanghai
##    restart: always
#    networks:
#     webserver:
#      ipv4_address: 172.18.238.11
#    ports:
#    - "5044:5044"
#    volumes:
#      - "./logstash/config:/usr/share/logstash/config"
#      - "./logstash/config/logstash-sql.conf:/usr/share/logstash/config/logstash-sql.conf"
#      - "./logstash/config/logstash-run.conf:/usr/share/logstash/config/logstash-run.conf"
#      - "./logstash/config/logstash-access.conf:/usr/share/logstash/config/logstash-access.conf"
##      - "./logstash/config/logstash.conf:/usr/share/logstash/config/logstash.conf"
##      - "./logstash/data:/usr/share/logstash/data"
#      - "../ql-gateway/log:/usr/share/logstash/run/log"
#    depends_on:
#      - elasticsearch
networks:
  webserver:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.238.0/24
#          gateway: 172.18.238.0

#          docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS="-Xms512m -Xmx512m" -e "discovery.type=single-node" elasticsearch:7.16.2
#docker run -d --name kk -p 5601:5601 kibana:7.16.2
